package com.services;

import java.util.*;
import com.models.*;

public class DocumnetManager {
	Map<Integer, Document> docs;
	
	public DocumnetManager() {
		this.docs= new HashMap<Integer, Document>();
	}
	
	public void addDoc(User user, String documentName) {
		Document document = new Document(documentName, user);
		this.docs.put(document.getId(), document);
		System.out.println("document " + document.getName() + " is added by " + document.getOwner().getName() + " with id " + user.getId());
	}
	
	public void deleteDoc(User user, int id) {
		Document document = docs.get(id);
		if(isValidOwner(user, docs.get(id))) {
			docs.remove(id);
			System.out.println("removed doc");
			return;
		}
		System.out.println("cant delete doc as " + user.getName() + " is not valid owner of " + document.getName());
	}
	
	public void addReadAccess(User owner, User user, int id) {
		Document document = getDocument(id);
		if(!isValidOwner(owner, document)) {
			System.out.println("cant add read acccess to doc as " + owner.getName() + " is not valid owner of " + document.getName());
			return;
		}
		document.getReadAccess().add(user.getId());
		System.out.println("added read access for " + user.getName() + " by " + owner.getName());
	}
	
	public void addEditAccess(User owner, User user, int id) {
		Document documnet = getDocument(id);
		if(!isValidOwner(owner, documnet)) {
			System.out.println("cant add edit acccess to doc as " + owner.getName() + " is not valid owner of " + documnet.getName());
			return;
		}
		documnet.getReadAccess().add(user.getId());
		documnet.getEditAccess().add(user.getId());
		System.out.println("added edit access for " + user.getName() + " by " + owner.getName());
	}
	
	public void addContent(User user, int docId, String content) {
		Document document = getDocument(docId);
		if(!isValidAccessor(user.getId(), document.getEditAccess())) {
			System.out.println("user " + user.getName() + " is not valid editor for file " + document.getName());
			return;
		}
		else {
			document.setContent(content);
		}
	}
	
	public String readContent(User user, int docId) {
		Document document = getDocument(docId);
		if(!isValidAccessor(user.getId(), document.getReadAccess())) {
			System.out.println("user " + user.getName() + " is not valid editor for file " + document.getName());
			return "";
		}
		else {
			return document.getContent();
		}
	}
	
	private boolean isValidOwner(User user, Document documnet) {
		if(user.getId() != documnet.getOwner().getId()) {
			return false;
		}
		return true;
	}
	
	private Document getDocument(int id) {
		return this.docs.get(id);
	}
	
	private boolean isValidAccessor(int userId, Set<Integer> accessorSet) {
		if(!accessorSet.contains(userId)) {
			return false;
		}
		return true;
	}
}
